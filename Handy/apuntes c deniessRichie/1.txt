Tipos de datos

int 
float

char        -> Caracter de un solo byte (8 bits)
short       -> Entero corto
long        -> Entero largo
double      -> punto flotante ed doble precisiοn


Recordar el formateo penca de C, dividir al final! .

Cosas de formato
    printf("%3d \t %6d\n",fahr ,celcius);
    -> Para darle un espacio de 3 y 6 digitos a el %d correspondiente


    Para nuestero codigo::
{
    #include<stdio.h>
    int main (){
        int fahr,celcius;
        int lower, upper , step;
        lower=0;
        upper=300;
        step=20;
        fahr=lower;
        while (fahr<=upper) {
            celcius= ((5)*(fahr-32))/9;
            printf("%3d \t %6d\n",fahr ,celcius);
            fahr =fahr + step;
        }
        return 1;
    }
    out::
      0         -17
     20          -6
     40           4
     60          15
     80          26
    100          37
    120          48
    140          60
    160          71
    180          82
    200          93
    220         104
    240         115
    260         126
    280         137
    300         148
}
    No se le a administrado un resultado preciso
    Se deve por tanto usar los float

Cambiio a float par ser mas preciso::
{
    #include<stdio.h>
    int main (){
        float fahr,celcius;
        int lower, upper , step;
        lower=0;
        upper=300;
        step=20;
        fahr=(float)lower;
        while ((int)fahr<=upper) {
            celcius= ((5)*(fahr-32))/9;
            printf("%3.f \t %6.1f\n",fahr ,celcius);
            fahr =fahr + (float)step;
        }
        return 1;
        out::{
              0       -17.8
             20        -6.7
             40         4.4
             60        15.6
             80        26.7
            100        37.8
            120        48.9
            140        60.0
            160        71.1
            180        82.2
            200        93.3
            220       104.4
            240       115.6
            260       126.7
            280       137.8
            300       148.9
        }
    }
}


    %d int
    %3d int con 3 de espacio recerbado
    %f float
    %6.1f float con 6 de espacio reservado y mostrando solo un decimal
    %f double
    %ld long 

Constantes simbolicas:: #define ::

    Una mala practica es usar nomueros 'sueltos', como el 300 , 200 y 0 , sin asociarlos a algun significado , para evitar esta confucion se usan constantes simbolicas con el formato de:

        #define [nombre_const] [value]
        -> no existe punto y coma
        -> Se usan mayusculas para falcil distincion
Ejemplo de uso
{
    #include<stdio.h>
    #define LOWER 0     // limite inferior
    #define UPPER 300   // limite superior
    #define STEP 20     // etc .....
    /*Imprecion de tabla fahr-celcius*/
    int main (){
        int fahr;
        for(fahr=LOWER;fahr<=UPPER;fahr=fahr+STEP){
            printf("%3d \t %6.1f\n",fahr,(5.0/9.0)*((float)fahr-32));
        }
    }
}

Entrada y salida de caracteres::

Stream (flujo de texto):
    Son la entrada y salida de texto , 
    Es una secuencia de 0 o mas caracteres divididos entre Líneas.
    La biblioteca es responsable de que cada secuencia de entrada o salida encaje con el modelo.

Biblioteca estandar:
    proporciona 2 funciones
        getchar() y putchar()

    c = getchar()
                -> Funcion de entrada, lee un solo caracter desde la entrada
                -> Lo devuelve como un int para comparara valores como el de EOF
                -> Si llega al final de la entrada(ctrl+d linux || ctrl+z windows ) devuelve un EOF 
                -> La variable c contiene el siguiente caracter de entrada
gcc hola.c -o trash
./trash
    - Deveeria hacer esto por ceparado o de lo contrario voy a mess up the streamflow 
{

    #include<stdio.h>
    int main (){
        int c; 
        printf("Escribe un caracter : ");
        c=getchar();
        printf("Has escrito : ");
        putchar(c);
        printf("\n");
        return 0;
    }
}

    putchar(c)
                -> Escribe un caracter cada vez que se invoca 
                -> Escribe el contenido de la variable entera c como un caracter.
                -> Generalmente impime en pantalla

                -> toma un char o un int y lo imprime como caracter
                -> equivale a printf("%c",c); pero mas simple y rapido
{
    #include<stdio.h>
    int main (){
        int c; 
        printf("Escribe una frase (Ctrl + d para terminar): \n");

        while ((c=getchar())!=EOF) {
            putchar(c);
        }

        return 0;
    }
}

    Conteo de caracteres
{
    #include<stdio.h>
    



    // Imprimir el numero de caracteres en pantala::

    int main (){
        long nc;
        nc=0;
        while (getchar() != EOF) {
            ++nc;
        }

        printf("\n ES : %ld \n",nc);

        return 0;
    }
}
    -> ahora con double en vez de long  
{
    #include<stdio.h>
    int main (){
        double nc;
        nc=0;

        while (getchar()!= EOF) {
            nc++;
        }
        printf("%0.f \n",nc);

        return 0;
    }    
}


long e int::
    long e int se usan para reprecentar enteros
    tamaνo de estos depende de la aquitectura 
    donde trabajo:
        int -> 4 bytes
        long -> 8 bytes

    Para imprimir en pantalla un long uso un %ld


    Conteo de líneas
        code::

    Conteo de palabras
        Combiene tener constantes simbolicas para mayor claridad, osea, tengo que ponerle un buen nombre a variables para que en el futuro cuando me ttoque escribirlas sea clara la aplicacion de esta
        - Las asociasciones se realizan de izquierda a derecha
        nl=nw=nc=0; 
{

    #include<stdio.h>

    #define IN 1        // dentro de la palabra
    #define OUT 0       // fuera de la palabra

    // Cuenta lineas , palabras y caracteres de la entrada

    int main (){
        int c,nl,nw,nc,state;
        state=OUT;
        nl=nw=nc=0; 
        while ((c=getchar())!=EOF) {
            ++nc;
            if(c =='\n')
                ++nl;
            if (c==' '|| c=='\n' ||c=='\t')
                state= OUT;
            else if (state==OUT){
                state=IN;
                nw++;
            }
        }   
        printf("%d %d %d\n", nl,nw,nc);

        return 0;
    }
}        
        - el codigo anterior muestra un ejemplo de eso pd , se vienen 2 ejercicios


Arreglos
    Ejemplo con codigo
{

    #include<stdio.h>

    // cuenta los digitos espacios en blanco y otros

    int main(){

        int c,i,nwhite,nother;
        int ndigit[10];

        nwhite=nother=0;
        for (i=0;i<10;i++) {
            ndigit[i]=0;
        }
        while ((c=getchar())!=EOF) {
            if ( c>='0' && c<='9') {
                ++ ndigit [c-'0']; // no entiendo bien que hace esto 
            }
            else if (c==' '|| c=='\n' || c=='\t' ) {
                ++nwhite;            
            }
            else {
                ++nother;
            }
        }
        printf("digitos =");
        for (i=0;i<10;i++) {
            printf(" %d",ndigit[i]);
        }
        printf(" Espacios blancos = %d , otros = %d \n",nwhite,nother);

        // lo tiro para /trash < hola.c para que exista un output respecto de sis mismo
    }

}

Ej 1-13 y 1-14

1.7 Funciones

{

    #include<stdio.h>

    int power(int m, int n); // Esta es una funcion prototipo, deve coincidir con su definicion
    // podria ser int power (int, int); pero conbiene ponerle buenos nombres para documentacion fuura


    int main(){

        int i;
    

        printf("Tabla de elevados:: \n");
        for (i=0;i<10;++i) {
            printf(" %d  %d  %d\n",i,power( 2, i),power(-3, i));
        }
    

        return 0;
    }

    /*
    int power(int base, int n){
        int i, p;
        p=1;

        for (int i=1;i<n;i++) {
            p=base*p;
        }


        return p;
    }
    */


    // ojo esta recursividad
    int power(int base, int n){

        if(n==0){
            return 1;
        }
        if (n==1)
            return base;

        return (base*power(base,n-1));
    }

}

Ej 1-15


1.8 Argumentos--llamadas por valor

    - Resulta que en c se llaman los valores ,pero las variables creadas dentro o declaradas en la definicion de la funcion se  desintegran al terminar de eejecutarse.
    - En fortran es distinto al parecer 

1.9 Arreglos de caracteres
    - Hola mundo`




    - El string 'hola mundo' se compone de:
        h o l a   m u n d o \n \0 
    - El \0 marca el fin del string


Variables externas y alcance

Prollecto gpt final capitulo